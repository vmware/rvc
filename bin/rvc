#!/usr/bin/env ruby
# Copyright (c) 2011 VMware, Inc.  All Rights Reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
require 'readline'
require "highline/import"
require 'pp'
require 'trollop'
require 'rbvmomi'
require 'rbvmomi/trollop'
require 'shellwords'
require 'yaml'
require 'backports'
require 'rvc'
require 'tempfile'

VIM = RbVmomi::VIM

Thread.abort_on_exception = true

CMD = Module.new
RVC::VERSION = File.read(File.join(File.dirname(__FILE__), '..', 'VERSION'))

HighLine.use_color = ENV['TERM'] != nil

$opts = Trollop.options do
  version RVC::VERSION

  banner <<-EOS
Ruby vSphere Console.

Usage:
       rvc [options] [username[:password]@]hostname

where [options] are:
EOS

  opt :path, "Initial directory", :short => :none, :default => ENV['RVC_PATH'], :type => :string
  opt :create_directory, "Create the initial directory if it doesn't exist", :short => :none
  opt :cmd, "command to evaluate", :short => 'c', :multi => true, :type => :string
  opt :script, "file to execute", :short => 's', :type => :string
end

$interactive = $opts[:script].nil? and $stdin.tty?

RVC.reload_modules false

session = if ENV['RVC_SESSION'] and not ENV['RVC_SESSION'].empty?
  RVC::FilesystemSession.new ENV['RVC_SESSION']
else
  RVC::MemorySession.new
end

$shell = RVC::Shell.new session

# Prompt for hostname if none given. Useful on win32.
if $shell.session.connections.empty? and ARGV.empty? and $interactive
  ARGV << Readline.readline("Host to connect to (user@host): ")
end

$shell.session.connections.each do |key|
  conn = $shell.session.get_connection(key) or fail "no such connection #{key.inspect}"
  uri = "#{conn['username']}@#{conn['host']}"
  begin
    puts "Connecting to #{uri}..."
    CMD.vim.connect uri, {}
  rescue RVC::Util::UserError
    puts "Failed to connect to #{uri}: #{$!.message}"
    exit 1
  end
end

ARGV.each do |uri|
  begin
    puts "Connecting to #{uri}..." if (ARGV+$shell.session.connections).size > 1
    CMD.vim.connect uri, {}
  rescue RVC::Util::UserError
    puts "Failed to connect to #{uri}: #{$!.message}"
    exit 1
  end
end

if $interactive
  RVC::Completion.install
  history_fn = "#{ENV['HOME']}/.rvc-history"
  IO.foreach(history_fn) { |l| Readline::HISTORY << l.chomp } rescue puts "Welcome to RVC. Try the 'help' command."
  history = File.open(history_fn, 'a')
end

if $opts[:path]
  begin
    CMD.basic.cd RVC::Util.lookup_single($opts[:path])
  rescue RVC::Util::UserError
    raise unless $opts[:create_directory]
    parent_path = File.dirname($opts[:path])
    RVC::Util.lookup_single(parent_path).CreateFolder(:name => File.basename($opts[:path]))
    CMD.basic.cd RVC::Util.lookup_single($opts[:path])
  end
elsif $shell.connections.size == 1 and $interactive
  conn_name, conn = $shell.connections.first
  if conn.serviceContent.about.apiType == 'VirtualCenter'
    CMD.basic.cd RVC::Util.lookup_single(conn_name)
  else
    CMD.basic.cd RVC::Util.lookup_single("#{conn_name}/ha-datacenter/vm")
  end
end

if defined? Ocra
  require "net/https"
  require "digest/sha2"
  exit
end

if $interactive
  $stderr.puts "VMRC is not installed. You will be unable to view virtual machine consoles. Use the vmrc.install command to install it." unless CMD.vmrc.find_vmrc 
  $stderr.puts "Use the 'connect' command to connect to an ESX or VC server." if $shell.connections.empty?
  CMD.basic.ls RVC::Util.lookup_single('.')

  # Load the marks YAML file, and see if we have one defined for this host. Apply those marks if we do.
  marks_fn = "#{ENV['HOME']}/.rvc-marks.yaml"
  if File.exists? marks_fn 
    marks = YAML.load_file marks_fn
    connected_hostname = $shell.connections.first.first
    if marks[connected_hostname]
      marks[connected_hostname].each do |mark,path|
        $shell.session.set_mark mark, [ RVC::Util.lookup_single( path ) ]
      end
    end
  end
end

trap "SIGCHLD" do |sig|
  begin
    while pid = Process.wait(-1, Process::WNOHANG)
    end
  rescue Errno::ECHILD
  end
end

if $opts[:script]
  $shell.eval_ruby File.read($opts[:script]), $opts[:script]
else
  while true
    begin
      input = $opts[:cmd].shift || Readline.readline($shell.prompt, false) or break
      input = input.strip
      next if input.empty?
      (history.puts input; Readline::HISTORY << input) unless input == Readline::HISTORY.to_a[-1]
      $shell.eval_input input
    rescue Interrupt
      puts
    end
  end
end
